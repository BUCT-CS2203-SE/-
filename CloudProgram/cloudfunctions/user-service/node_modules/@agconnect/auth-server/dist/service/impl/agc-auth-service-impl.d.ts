import { AGCAuthJwtToken } from "../../jwt/agc-auth-jwttoken";
import { RSAKeyPair } from "../../jwt/rsa-key-pair";
import { UserImportExportResult } from "../../entity/user-import-export-result";
import { AGCClient, AGCService } from "@agconnect/common-server";
import { AGCAuthService } from "./agc-auth-service";
import { AuthAccessToken } from "../../entity/auth-access-token";
export declare const SERVICE_NAME = "AUTH";
export declare class AGCAuthServiceImpl implements AGCAuthService, AGCService {
    private static RSA_KEY_SIZE;
    private static ONE_HOUR_SECOND;
    private static IMPORT_USER_LIMIT_SIZE;
    private static HTTP_STATUS_UNAUTHORIZED;
    private static THIRD_ACCESS_TOKEN_AUTH_FAILED;
    private static INVALID_ACCESS_TOKEN;
    private static EXPIRED_TOKEN;
    private static REVOKE_TOKEN;
    private client;
    sign(uid: string, displayName: string, photoUrl: string, privateKey: string): AGCAuthJwtToken;
    generateKey(): RSAKeyPair;
    importUserData(filePath: string): Promise<UserImportExportResult>;
    exportUserData(filePath: string): Promise<UserImportExportResult>;
    revokeRefreshTokens(uid: string): Promise<void>;
    verifyAccessToken(accessToken: string, checkRevoked: boolean): Promise<AuthAccessToken>;
    initialize(client: AGCClient): void;
    getServiceName(): string;
    private doTokenVerifyRequest;
    private buildAuthAccessToken;
    private readImportUsers;
    private getExportSuccessFailList;
    private getImportSuccessFailList;
    private writeObjectToFile;
    private sendRequestGetBlockUserList;
    private sendRequestGetExportUser;
}
