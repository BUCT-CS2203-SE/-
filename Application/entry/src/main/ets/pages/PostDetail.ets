import router from '@ohos.router';
import prompt from '@ohos.prompt';
import { PostService } from '../services/PostService';
import { CommentService } from '../services/CommentService';
import { Post, Comment } from '../model/PostModel';
import { CommentData } from '../model/CommentModel';
import { formatDate } from '../utils/DateUtils';
import { getUserInfo } from '../utils/UserUtils';

/**
 * Ë∑ØÁî±ÂèÇÊï∞Êé•Âè£
 */
interface RouteParams {
  postId: string;
}

@Entry
@Component
struct PostDetail {
  @State post: Post | null = null;
  @State comments: Comment[] = [];
  @State isLoading: boolean = true;
  @State isLoadingComments: boolean = false;
  @State commentContent: string = '';
  @State isSubmittingComment: boolean = false;

  aboutToAppear() {
    const params = router.getParams() as RouteParams;
    if (params && params.postId) {
      this.loadPostDetail(params.postId);
      this.loadComments(params.postId);
    } else {
      prompt.showToast({ message: 'ÂèÇÊï∞ÈîôËØØÔºåÊó†Ê≥ïÂä†ËΩΩÂ∏ñÂ≠ê' });
      setTimeout(() => {
        router.back();
      }, 1000);
    }
  }

  /**
   * Âä†ËΩΩÂ∏ñÂ≠êËØ¶ÊÉÖ
   * @param postId Â∏ñÂ≠êID
   */
  async loadPostDetail(postId: string) {
    try {
      this.isLoading = true;
      const postData = await PostService.getPostById(postId);
      if (postData) {
        this.post = postData;
      } else {
        prompt.showToast({ message: 'Â∏ñÂ≠ê‰∏çÂ≠òÂú®ÊàñÂ∑≤Ë¢´Âà†Èô§' });
        setTimeout(() => {
          router.back();
        }, 1000);
      }
    } catch (error) {
      console.error('Âä†ËΩΩÂ∏ñÂ≠êËØ¶ÊÉÖÂ§±Ë¥•:', error);
      prompt.showToast({ message: 'Âä†ËΩΩÂ∏ñÂ≠êÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï' });
    } finally {
      this.isLoading = false;
    }
  }

  /**
   * Âä†ËΩΩËØÑËÆ∫ÂàóË°®
   * @param postId Â∏ñÂ≠êID
   */
  async loadComments(postId: string) {
    try {
      this.isLoadingComments = true;
      const result = await PostService.getComments(postId);
      if (result.code === 0 && result.data) {
        this.comments = result.data;
      } else {
        console.error('Ëé∑ÂèñËØÑËÆ∫ÂàóË°®Â§±Ë¥•:', result.message);
      }
    } catch (error) {
      console.error('Âä†ËΩΩËØÑËÆ∫Â§±Ë¥•:', error);
    } finally {
      this.isLoadingComments = false;
    }
  }

  /**
   * ÂèëË°®ËØÑËÆ∫
   */
  async submitComment() {
    if (!this.commentContent.trim()) {
      prompt.showToast({ message: 'ËØ∑ËæìÂÖ•ËØÑËÆ∫ÂÜÖÂÆπ' });
      return;
    }

    try {
      this.isSubmittingComment = true;
      const userInfo = await getUserInfo();
      if (!userInfo) {
        prompt.showToast({ message: 'ËØ∑ÂÖàÁôªÂΩïÂêéÂÜçËØÑËÆ∫' });
        this.isSubmittingComment = false;
        return;
      }

      const now = new Date();
      const commentData: CommentData = {
        comment_id: `comment_${now.getTime()}`,
        post_id: this.post?.post_id || '',
        user_id: userInfo.user_id,
        nickname: userInfo.nickname,
        img_url: userInfo.img_url,
        content: this.commentContent,
        create_time: formatDate(now, 'YYYY-MM-DD HH:mm:ss'),
        create_timestamp: now.getTime()
      };

      const result = await CommentService.addComment(commentData);
      if (result.code === 0 && result.data) {
        prompt.showToast({ message: 'ËØÑËÆ∫ÂèëË°®ÊàêÂäü' });
        this.commentContent = '';
        // Âà∑Êñ∞ËØÑËÆ∫ÂàóË°®
        this.loadComments(this.post?.post_id || '');
      } else {
        prompt.showToast({ 
          message: result.message || 'ËØÑËÆ∫ÂèëË°®Â§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï',
          duration: 3000
        });
      }
    } catch (error) {
      console.error('ÂèëË°®ËØÑËÆ∫Â§±Ë¥•:', error);
      prompt.showToast({ message: 'ËØÑËÆ∫ÂèëË°®Â§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï' });
    } finally {
      this.isSubmittingComment = false;
    }
  }

  /**
   * ÁÇπËµû/ÂèñÊ∂àÁÇπËµû
   */
  async toggleLike() {
    if (!this.post) return;
    
    try {
      if (this.post.is_favorited === 1) {
        const result = await PostService.unlikePost(this.post.post_id);
        if (result.code === 0 && result.data) {
          this.post.likes = result.data.likes;
          this.post.is_favorited = 0;
          prompt.showToast({ message: 'Â∑≤ÂèñÊ∂àÁÇπËµû' });
        } else {
          prompt.showToast({ message: 'Êìç‰ΩúÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï' });
        }
      } else {
        const result = await PostService.likePost(this.post.post_id);
        if (result.code === 0 && result.data) {
          this.post.likes = result.data.likes;
          this.post.is_favorited = 1;
          prompt.showToast({ message: 'ÁÇπËµûÊàêÂäü' });
        } else {
          prompt.showToast({ message: 'Êìç‰ΩúÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï' });
        }
      }
    } catch (error) {
      console.error('ÁÇπËµûÊìç‰ΩúÂ§±Ë¥•:', error);
      prompt.showToast({ message: 'Êìç‰ΩúÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï' });
    }
  }

  build() {
    Column() {
      // È°∂ÈÉ®Ê†è
      Row() {
        Image($r('app.media.back'))
          .width(24)
          .height(24)
          .onClick(() => {
            router.back();
          })
        
        Text('Â∏ñÂ≠êËØ¶ÊÉÖ')
          .fontSize(20)
          .fontWeight(FontWeight.Bold)
          .layoutWeight(1)
          .textAlign(TextAlign.Center)
      }
      .width('100%')
      .height(56)
      .padding({ left: 16, right: 16 })
      .backgroundColor('#FFFFFF')

      // ÂÜÖÂÆπÂå∫Âüü
      if (this.isLoading) {
        Column() {
          LoadingProgress()
            .width(50)
            .height(50)
            .color('#1698CE')
          
          Text('Ê≠£Âú®Âä†ËΩΩ...')
            .fontSize(16)
            .margin({ top: 10 })
        }
        .width('100%')
        .layoutWeight(1)
        .justifyContent(FlexAlign.Center)
      } else if (this.post) {
        Scroll() {
          Column() {
            // Â∏ñÂ≠êÂÜÖÂÆπÂç°Áâá
            Column() {
              // Áî®Êà∑‰ø°ÊÅØÂíåÂèëÂ∏ÉÊó∂Èó¥
              Row() {
                Image(this.post.img_url || $r('app.media.icon'))
                  .width(40)
                  .height(40)
                  .borderRadius(20)
                  .margin({ right: 10 })
                
                Column() {
                  Text(this.post.nickname)
                    .fontSize(16)
                    .fontWeight(FontWeight.Bold)
                  
                  Text(this.post.create_time)
                    .fontSize(12)
                    .fontColor('#999999')
                }
                .alignItems(HorizontalAlign.Start)
                .layoutWeight(1)
              }
              .width('100%')
              .justifyContent(FlexAlign.Start)
              .margin({ bottom: 16 })

              // Â∏ñÂ≠êÂÜÖÂÆπ
              Text(this.post.content)
                .fontSize(16)
                .width('100%')
                .margin({ bottom: 16 })

              // Â∏ñÂ≠êÂõæÁâá
              if (this.post.post_img_url) {
                Image(this.post.post_img_url)
                  .width('100%')
                  .aspectRatio(1.5)
                  .objectFit(ImageFit.Cover)
                  .borderRadius(8)
                  .margin({ bottom: 16 })
              }

              // ‰∫§‰∫íÊï∞ÊçÆ
              Row() {
                Row() {
                  Text(this.post.is_favorited === 1 ? '‚ô•' : '‚ô°')
                    .fontSize(24)
                    .fontColor(this.post.is_favorited === 1 ? '#FF0000' : '#666666')
                  Text(this.post.likes.toString())
                    .fontSize(14)
                    .margin({ left: 5 })
                }
                .onClick(() => {
                  this.toggleLike();
                })
                .margin({ right: 24 })

                Row() {
                  Text('üí¨')
                    .fontSize(24)
                  Text(this.comments.length.toString())
                    .fontSize(14)
                    .margin({ left: 5 })
                }
              }
              .width('100%')
              .justifyContent(FlexAlign.Start)
            }
            .width('100%')
            .padding(16)
            .backgroundColor('#FFFFFF')
            .borderRadius(8)
            .margin({ bottom: 12 })

            // ËØÑËÆ∫Âå∫Âüü
            Column() {
              // ËØÑËÆ∫Ê†áÈ¢ò
              Row() {
                Text('ËØÑËÆ∫')
                  .fontSize(18)
                  .fontWeight(FontWeight.Bold)
                  .margin({ bottom: 12 })
              }
              .width('100%')

              // ËØÑËÆ∫ÂàóË°®
              if (this.isLoadingComments) {
                Row() {
                  LoadingProgress()
                    .width(24)
                    .height(24)
                    .color('#1698CE')
                  Text('Âä†ËΩΩËØÑËÆ∫‰∏≠...')
                    .fontSize(14)
                    .margin({ left: 8 })
                }
                .width('100%')
                .justifyContent(FlexAlign.Center)
                .padding({ vertical: 16 })
              } else if (this.comments.length === 0) {
                Text('ÊöÇÊó†ËØÑËÆ∫ÔºåÂø´Êù•ÂèëË°®Á¨¨‰∏ÄÊù°ËØÑËÆ∫Âêß')
                  .fontSize(14)
                  .fontColor('#999999')
                  .width('100%')
                  .textAlign(TextAlign.Center)
                  .padding({ vertical: 16 })
              } else {
                Column() {
                  ForEach(this.comments, (comment: Comment) => {
                    Column() {
                      // ËØÑËÆ∫Áî®Êà∑‰ø°ÊÅØ
                      Row() {
                        Image(comment.img_url || $r('app.media.icon'))
                          .width(32)
                          .height(32)
                          .borderRadius(16)
                          .margin({ right: 8 })
                        
                        Column() {
                          Text(comment.nickname)
                            .fontSize(14)
                            .fontWeight(FontWeight.Bold)
                          
                          Text(comment.create_time)
                            .fontSize(12)
                            .fontColor('#999999')
                        }
                        .alignItems(HorizontalAlign.Start)
                      }
                      .width('100%')
                      .margin({ bottom: 8 })
                      
                      // ËØÑËÆ∫ÂÜÖÂÆπ
                      Text(comment.content)
                        .fontSize(15)
                        .width('100%')
                        .padding({ left: 40 })
                      
                      Divider()
                        .width('100%')
                        .margin({ top: 12, bottom: 12 })
                        .color('#EEEEEE')
                    }
                    .width('100%')
                  })
                }
                .width('100%')
              }
            }
            .width('100%')
            .padding(16)
            .backgroundColor('#FFFFFF')
            .borderRadius(8)
          }
          .width('100%')
          .padding(12)
        }
        .width('100%')
        .layoutWeight(1)
      } else {
        Column() {
          Image($r('app.media.no_result'))
            .width(100)
            .height(100)
            .margin({ bottom: 20 })
          
          Text('Â∏ñÂ≠ê‰∏çÂ≠òÂú®ÊàñÂ∑≤Ë¢´Âà†Èô§')
            .fontSize(16)
            .fontColor('#999999')
        }
        .width('100%')
        .layoutWeight(1)
        .justifyContent(FlexAlign.Center)
      }

      // ËØÑËÆ∫ËæìÂÖ•Âå∫Âüü
      Row() {
        TextInput({ placeholder: 'ËØ¥ÁÇπ‰ªÄ‰πà...', text: this.commentContent })
          .width('75%')
          .height(40)
          .backgroundColor('#F5F5F5')
          .borderRadius(20)
          .padding({ left: 12, right: 12 })
          .onChange((value: string) => {
            this.commentContent = value;
          })

        Button({ type: ButtonType.Normal, stateEffect: true }) {
          Row() {
            if (this.isSubmittingComment) {
              LoadingProgress()
                .width(20)
                .height(20)
                .color('#FFFFFF')
                .margin({ right: 5 })
            }
            Text('ÂèëÈÄÅ')
              .fontColor('#FFFFFF')
          }
        }
        .width('20%')
        .height(40)
        .backgroundColor('#1698CE')
        .borderRadius(20)
        .enabled(!this.isSubmittingComment)
        .onClick(() => {
          this.submitComment();
        })
      }
      .width('100%')
      .justifyContent(FlexAlign.SpaceBetween)
      .padding(16)
      .backgroundColor('#FFFFFF')
      .border({ width: { top: 0.5 }, color: '#EEEEEE' })
    }
    .width('100%')
    .height('100%')
    .backgroundColor('#F5F5F5')
  }
} 